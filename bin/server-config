#!/usr/bin/php
<?php
/**
 *  Copyright (C) 2016 SURFnet.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
require_once sprintf('%s/vendor/autoload.php', dirname(__DIR__));

use SURFnet\VPN\Server\Utils;
use SURFnet\VPN\Server\IP;
use SURFnet\VPN\Server\InstanceConfig;
use SURFnet\VPN\Server\OpenVpnConfig;

function showHelp(array $argv)
{
    return implode(
        PHP_EOL,
        [
            sprintf('SYNTAX: %s [--instance domain.tld]', $argv[0]),
            '',
            '--instance domain.tld      the instance to write configuration files',
            '                           for',
            '',
        ]
    );
}

try {
    $instanceId = null;

    for ($i = 0; $i < $argc; ++$i) {
        if ('--help' == $argv[$i] || '-h' === $argv[$i]) {
            echo showHelp($argv);
            exit(0);
        }

        if ('--instance' === $argv[$i] || '-i' === $argv[$i]) {
            if (array_key_exists($i + 1, $argv)) {
                $instanceId = $argv[$i + 1];
                ++$i;
            }
        }
    }

    if (is_null($instanceId)) {
        throw new RuntimeException('instance must be specified, see --help');
    }

    $configFile = sprintf('%s/config/%s/config.yaml', dirname(__DIR__), $instanceId);
    $instanceConfig = InstanceConfig::fromFile($configFile);
    $instanceNumber = $instanceConfig->instanceNumber();

    $poolList = $instanceConfig->pools();
    $j = 0;
    foreach ($poolList as $poolId) {
        $poolData = $instanceConfig->pool($poolId)->toArray();
        $poolData['instanceId'] = $instanceId;
        $poolData['poolId'] = $poolId;
        $poolData['managementIp'] = sprintf('127.42.%d.%d', 100 + $instanceNumber, 100 + $j);

        // determine the number of OpenVPN processes
        $range = new IP($poolData['range']);
        $range6 = new IP($poolData['range6']);
        $processCount = Utils::getNetCount($range->getPrefix());

        $splitRange = $range->split($processCount);
        $splitRange6 = $range6->split($processCount);

        for ($k = 0; $k < $processCount; ++$k) {
            // protocol is udp unless it is the last process when there is
            // not just one process
            if (1 === $processCount || $k !== $processCount - 1) {
                $proto = 'udp';
                $port = 1194 + $k;
            } else {
                $proto = 'tcp';
                $port = 1194;
            }

            $poolData = array_merge(
                $poolData,
                [
                    'range' => $splitRange[$k],
                    'range6' => $splitRange6[$k],
                    'dev' => sprintf('tun-%d-%d-%d', $instanceNumber, $j, $k),
                    'proto' => $proto,
                    'port' => $port,
                    'managementPort' => 11940 + $k,
                ]
            );

            $configFileName = sprintf('server-%s-%s-%s-%d.conf', $instanceId, $poolId, $proto, $port);

            $instancePoolList[$configFileName] = $poolData;
        }
        ++$j;
    }

    foreach ($instancePoolList as $configFileName => $processData) {
        echo '------------------------------'.PHP_EOL;
        echo $configFileName.PHP_EOL;
        echo '------------------------------'.PHP_EOL;
        $s = new OpenVpnConfig($processData);
        echo $s->getFile();
    }
} catch (Exception $e) {
    echo sprintf('ERROR: %s', $e->getMessage()).PHP_EOL;
    exit(1);
}
